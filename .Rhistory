SampleId = "undetermined",
SampleName = "undetermined",
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
undet[1],
do.call(cbind, rm)[,4],
row.names = NULL, stringsAsFactors = F)
})
undetermined <- do.call(rbind, undetermined)
undetermined
# Undetermined reads
undetermined <- lapply(result$ConversionResults, function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = "undetermined",
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
undet[1],
rm[4],
row.names = NULL, stringsAsFactors = F)
})
undetermined <- do.call(rbind, undetermined)
undetermined
# Undetermined reads
undetermined <- lapply(result$ConversionResults, function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = "undetermined",
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
undet[1],
unique(rm[4]),
row.names = NULL, stringsAsFactors = F)
})
undetermined <- do.call(rbind, undetermined)
# Undetermined reads
undetermined <- lapply(result$ConversionResults, function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = "undetermined",
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
undet[1],
unique(rm[4]),
row.names = NULL, stringsAsFactors = F)
})
undetermined
# Undetermined reads
undetermined <- lapply(result$ConversionResults, function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = "undetermined",
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
unique(undet[1]),
unique(rm[4]),
row.names = NULL, stringsAsFactors = F)
})
undetermined <- do.call(rbind, undetermined)
undetermined
# Undetermined reads
covResApply(result, "Undetermined", function(demux){
if(length(demux) > 1){
demux[4]
}else{
demux[1]
}
})
# Undetermined reads
covResApply(result, "Undetermined", function(demux){
if(length(demux) > 1){
demux[[1]][4]
}else{
demux[1]
}
})
undetermined <- lapply(result$ConversionResults, function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = "undetermined",
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
do.call(cbind, rm),
row.names = NULL, stringsAsFactors = F)
})
undetermined <- do.call(rbind, undetermined)
undetermined
# Undetermined reads
covResApply(result, "Undetermined", function(demux){
if(length(demux) > 1){
demux[[1]][4]
}else{
demux[1]
}
})
# Undetermined reads
covResApply(result, "Undetermined", function(demux){
if(length(demux) > 1){
demux$Yield
}else{
demux[1]
}
})
# Undetermined reads
covResApply(result, "Undetermined", function(demux){
if(length(demux) > 1){
demux$Yield
}else{
demux[1]
}
})
undetermined <- lapply(result$ConversionResults, function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = "undetermined",
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
do.call(cbind, rm),
row.names = NULL, stringsAsFactors = F)
})
undetermined <- do.call(rbind, undetermined)
undetermined
overall
result$ConversionResults[[1]]$Undetermined$NumberReads
result$ConversionResults[[1]]$Undetermined$Yield
undetermined <- lapply(result$ConversionResults, function(lane){
undet <- lane$Undetermined
# rm <- unlist(undet$ReadMetrics)
# rm <- split(rm, names(rm))
# rm <- do.call(cbind, rm)
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = "undetermined",
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
NumberReads = undet$NumberReads,
Yield = undet$Yield,
row.names = NULL, stringsAsFactors = F)
})
undetermined <- do.call(rbind, undetermined)
undetermined
undetermined <- lapply(result$ConversionResults, function(lane){
undet <- lane$Undetermined
# rm <- unlist(undet$ReadMetrics)
# rm <- split(rm, names(rm))
# rm <- do.call(cbind, rm)
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
NumberReads = undet$NumberReads,
Yield = undet$Yield,
row.names = NULL, stringsAsFactors = F)
})
undetermined <- do.call(rbind, undetermined)
undetermined
overall <- rbind(overall, undetermined)
overall
readMetrics
undetermined <- lapply(result$ConversionResults, function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
rm <- do.call(cbind, rm)
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
rm,
row.names = NULL, stringsAsFactors = F)
})
undetermined <- do.call(rbind, undetermined)
undetermined
readMetrics <- rbind(readMetrics, undetermined)
readMetrics
covResApply(result, FUN = function(lane){
undet <- lane$Undetermined
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
NumberReads = undet$NumberReads,
Yield = undet$Yield,
row.names = NULL, stringsAsFactors = F)
})
# The field "ConversionResults" is a list reporting all
# the infos of the demultiplexing. This
# function will apply a given function to list
# contained in the "which" slot
covResApply <- function(result, which = NULL, FUN){
covRes <- result$ConversionResults
res <- lapply(covRes, function(lane){
if(is.null(which)){
FUN(lane)
}else{
# Building data frame with index metrics
l <- get(which, lane)
res <- lapply(l, FUN)
data.frame(Lane = lane$LaneNumber,
do.call(rbind, res),
stringsAsFactors = F)
}
})
do.call(rbind, res)
}
covResApply(result, FUN = function(lane){
undet <- lane$Undetermined
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
NumberReads = undet$NumberReads,
Yield = undet$Yield,
row.names = NULL, stringsAsFactors = F)
})
# Overall information
overall <- covResApply(result, "DemuxResults", function(demux){
index <- unlist(demux$IndexMetrics)
c(SampleId = demux$SampleId,
SampleName = demux$SampleName,
index,
NumberReads = demux$NumberReads,
Yield = demux$Yield)
})
# Reads metrics
readMetrics <- covResApply(result, "DemuxResults", function(demux){
rm <- unlist(demux$ReadMetrics)
rm <- split(rm, names(rm))
data.frame(demux[1:2], do.call(cbind, rm),
row.names = NULL, stringsAsFactors = F)
})
# Undetermined reads
covResApply(result, "Undetermined", function(demux){
if(length(demux) > 1){
demux$Yield
}else{
demux[1]
}
})
undetermined <- covResApply(result, FUN = function(lane){
undet <- lane$Undetermined
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
NumberReads = undet$NumberReads,
Yield = undet$Yield,
row.names = NULL, stringsAsFactors = F)
})
overall <- rbind(overall, undetermined)
overall
undetermined <- covResApply(result, FUN = function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
rm <- do.call(cbind, rm)
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
rm,
row.names = NULL, stringsAsFactors = F)
})
readMetrics <- rbind(readMetrics, undetermined)
library(rjson)
result <- fromJSON(file = "data/Stats.json")
# ConversionResults is a list of length 2 one for each lane
# the first 4 elements report the total output for the lane
lanes <- t(sapply(result$ConversionResults, function(lane){
unlist(lane[1:4])
}))
# The field "ConversionResults" is a list reporting all
# the infos of the demultiplexing. This
# function will apply a given function to list
# contained in the "which" slot
covResApply <- function(result, which = NULL, FUN){
covRes <- result$ConversionResults
res <- lapply(covRes, function(lane){
if(is.null(which)){
FUN(lane)
}else{
# Building data frame with index metrics
l <- get(which, lane)
res <- lapply(l, FUN)
data.frame(Lane = lane$LaneNumber,
do.call(rbind, res),
stringsAsFactors = F)
}
})
do.call(rbind, res)
}
# Overall information
overall <- covResApply(result, "DemuxResults", function(demux){
index <- unlist(demux$IndexMetrics)
c(SampleId = demux$SampleId,
SampleName = demux$SampleName,
index,
NumberReads = demux$NumberReads,
Yield = demux$Yield)
})
# Reads metrics
readMetrics <- covResApply(result, "DemuxResults", function(demux){
rm <- unlist(demux$ReadMetrics)
rm <- split(rm, names(rm))
data.frame(demux[1:2], do.call(cbind, rm),
row.names = NULL, stringsAsFactors = F)
})
# Adding undetermined infos
undetermined <- covResApply(result, FUN = function(lane){
undet <- lane$Undetermined
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
NumberReads = undet$NumberReads,
Yield = undet$Yield,
row.names = NULL, stringsAsFactors = F)
})
overall <- rbind(overall, undetermined)
undetermined <- covResApply(result, FUN = function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
rm <- do.call(cbind, rm)
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
rm,
row.names = NULL, stringsAsFactors = F)
})
readMetrics <- rbind(readMetrics, undetermined)
# Saving
save_table <- function(table, file){
write.table(table, file, sep = "\t", quote = F,
row.names = F, col.names = T)
}
save_table(lanes, "lanes.tsv")
save_table(overall, "overall.tsv")
save_table(readMetrics, "read_metrics.tsv")
result <- fromJSON(file = "data/Stats.json")
setwd("/home/giovannib/Dropbox/Scripts/R/illuminaStatParser")
result <- fromJSON(file = "data/Stats.json")
# ConversionResults is a list of length 2 one for each lane
# the first 4 elements report the total output for the lane
lanes <- t(sapply(result$ConversionResults, function(lane){
unlist(lane[1:4])
}))
# The field "ConversionResults" is a list reporting all
# the infos of the demultiplexing. This
# function will apply a given function to list
# contained in the "which" slot
covResApply <- function(result, which = NULL, FUN){
covRes <- result$ConversionResults
res <- lapply(covRes, function(lane){
if(is.null(which)){
FUN(lane)
}else{
# Building data frame with index metrics
l <- get(which, lane)
res <- lapply(l, FUN)
data.frame(Lane = lane$LaneNumber,
do.call(rbind, res),
stringsAsFactors = F)
}
})
do.call(rbind, res)
}
# Overall information
overall <- covResApply(result, "DemuxResults", function(demux){
index <- unlist(demux$IndexMetrics)
c(SampleId = demux$SampleId,
SampleName = demux$SampleName,
index,
NumberReads = demux$NumberReads,
Yield = demux$Yield)
})
# Reads metrics
readMetrics <- covResApply(result, "DemuxResults", function(demux){
rm <- unlist(demux$ReadMetrics)
rm <- split(rm, names(rm))
data.frame(demux[1:2], do.call(cbind, rm),
row.names = NULL, stringsAsFactors = F)
})
# Adding undetermined infos
undetermined <- covResApply(result, FUN = function(lane){
undet <- lane$Undetermined
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
IndexSequence = NA,
MismatchCounts.0 = NA,
MismatchCounts.1 = NA,
NumberReads = undet$NumberReads,
Yield = undet$Yield,
row.names = NULL, stringsAsFactors = F)
})
overall <- rbind(overall, undetermined)
undetermined <- covResApply(result, FUN = function(lane){
undet <- lane$Undetermined
rm <- unlist(undet$ReadMetrics)
rm <- split(rm, names(rm))
rm <- do.call(cbind, rm)
data.frame(Lane = lane$LaneNumber,
SampleId = "undetermined",
SampleName = NA,
rm,
row.names = NULL, stringsAsFactors = F)
})
readMetrics <- rbind(readMetrics, undetermined)
# Saving
save_table <- function(table, file){
write.table(table, file, sep = "\t", quote = F,
row.names = F, col.names = T)
}
save_table(lanes, "lanes.tsv")
save_table(overall, "overall.tsv")
save_table(readMetrics, "read_metrics.tsv")
wilcox.test(c(55.2, 46.5), c(38.3, 35.9))
wilcox.test(c(561.3, 687.7), c(393.8, 326.7))
?wilcox.test
?kruskal.test()
rep(c("A", "B"), each = 2)
kruskal.test(c(55.2, 46.5, 38.3, 35.9), rep(c("A", "B"), each = 2))
t.test(c(561.3, 687.7), c(393.8, 326.7))
t.test(c(55.2, 46.5), c(38.3, 35.9))
library(DESeq2)
library(compositions)
library(vegan)
library(caret)
library(pROC)
library(tidyverse)
library(ggbeeswarm)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
eval = TRUE)
# importing gene counts
genes <- readRDS("./data/gene_counts.rds")
# importing proportion of taxa
taxa <- readRDS("./data/taxa_ab.rds")
# sample data
meta <- readRDS("./data/sample_meta.rds")
ilr(taxa)
?ilr
install.packages("robCompositions")
library(robCompositions)
pcaCoDa(taxa)
pcaCoDa(taxa[,1:10])
taxa[,1:2]
pcaCoDa(taxa[,1:2])
pcaCoDa(t(taxa))
data(arcticLake)
arcticLake
pcaCoDa(arcticLake)
res.rob <- pcaCoDa(arcticLake)
plot(res.rob)
biplot(res.rob)
res.rob <- pcaCoDa(data.frame(taxa))
res.rob <- pcaCoDa(data.frame(taxa)[,1:3])
data.frame(taxa)[,1:3]
res.rob <- pcaCoDa(data.frame(taxa)[,1:3], method = "classical")
res.rob <- pcaCoDa(data.frame(taxa), method = "classical")
citation()
gene.meta <- readRDS("data/gene_meta.rds")
gene.meta
colnames(gene.meta)
install.packages(c("caret", "compositions", "ggbeeswarm", "pROC"))
packageVersion("compositions")
citation("vegan")
?vegan::rda
?metaMDS
?vegan::metaMDS
?DESeq2::vst
citation("caret")
?caret::trainControl
install.packages("randomForest")
citation("randomForest")
?randomForest
