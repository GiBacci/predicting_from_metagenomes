---
title: "Host trait prediction from high-resolution microbial features"
author: "Giovanni Bacci^1^*  \n^1^Department of Biology, University of Florence, Via Madonna del Piano 6, Sesto Fiorentino, FI, I-50019, Italy  \n*Corresponding author: giovanni.bacci@unifi.it"
output: word_document
# bibliography: /home/giovannib/Dropbox/Predicting_from_metagenomes/bib/bibliography.bib
# csl: /home/giovannib/Dropbox/Predicting_from_metagenomes/bib/nature.csl

bibliography: /Users/giovanni/Dropbox/Predicting_from_metagenomes/bib/bibliography.bib
csl: /Users/giovanni/Dropbox/Predicting_from_metagenomes/bib/nature.csl
---

```{r setup, include=FALSE}
library(DESeq2)
library(compositions)

library(vegan)

library(caret)
library(pROC)

library(tidyverse)
library(ggbeeswarm)

knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE,
                      eval = TRUE)
```

## Running head

Predictions from metagenomes

## Summary (500 characters)

Predicting host traits from metagenomes presents new challanges that can be difficult to overcome for researchers without a strong background in bioinformatics and/or statistics. Profiling bacterial communities usign shotgun metagenomics often leads to the generation of a large amount of data that cannot be used directly for training a model. In this chapter we provide a detailed description of how to build a working machine learning model based on taxonomic and functional features of bacterial communities inhabiting the lungs of cystic fibrosis patients. Models are build in the R environment by using different freely available machine learning algortihms.

## Keywords

machine learning, next generation sequencing, metagenomics, host trait prediciton, community profiling, taxonomic profiling, functional profiling

## 1. Introduction



## 2. Materials

A working installation of R [@rcore2019] is required for this tutorial to work, along with a set of libraries mainly used for building and validating the model. The workflow here proposed is based on data coming from a metagenomic study on cystic fibrosis lung communities along time [@bacci2019taxonomic]. A complete description of datasets, hardware and software requirements is given below.

### 2.1 Data files

In this tutorial bacterial features obtained from shotgun metagenomics sequencing are used to build a machine learning model and to make infereces on bacterial community structure. The data consist of three main tables reporting quantitative and qualitative information about taxa detected in the lung of subjects included in the study, genes harbored by those taxa, and clinical characteristics of the subjects. Data can be downloaded from [LINK DA INSERIRE](). Tables are available in the RDS format and can be easily imported into R using the function `readRDS()`. Since RDS is the native data file format for R, tables can be directly loaded into the R environment without worrying about additional parameters such as field separator, decimal separator, charcater encoding format, and so on. A description of the data files available is given below:

1. taxa_ab.rds
   
   Taxa abundances in all subjects included in the study. Each row of the table is a different observation whereas each column represent a different taxa detected. The proportion of taxa is reported as relative abundance so that the sum of all taxa abundances in each observation is one.
   
2. gene_counts.rds

   Counts of metagenomic reads mapping to bacterial genes recovered from lung communities. The same standard used for taxa abundance was used here with each reporting a different observation and each olumn reporting a different gene. In metagenomic studies genes are usually more than observations and they can be reported into rows instead of columns so to minimize the number of variables and reduce memory requirement.
   
3. gene_meta.rds

   Characteristics of genes included in the gene count table reported in 2. This table is a slight modifyed version of the output produced by eggNOG mapper [@huerta2017fast]. 

### 2.2 Software requirements

### 2.3 Hardware requirements

## 3. Methods

### 3.1 Importing data

```{r dataInport}
# importing gene counts
genes <- readRDS("./data/gene_counts.rds")

# importing proportion of taxa
taxa <- readRDS("./data/taxa_ab.rds")

# sample data
meta <- readRDS("./data/sample_meta.rds")
```

### 3.2 Data transformation

```{r dataTransformation}
taxa.clr <- clr(taxa)
class(taxa.clr) <- "matrix"

genes.vst <- DESeqDataSetFromMatrix(t(genes), colData = meta, 
                                    design = ~ 1)
genes.vst <- estimateSizeFactors(genes.vst)
genes.vst <- vst(genes.vst)
genes.vst <- t(assay(genes.vst))

alpha <- diversity(taxa, index = "invsimpson")
alpha <- data.frame(A=(alpha - mean(alpha))/sd(alpha))

taxa.pca <- prcomp(taxa.clr, center = T, scale. = T)
genes.pca <- prcomp(genes.vst, center = T, scale. = T)

taxa.x <- taxa.pca$x[,taxa.pca$sdev^2 >= 1]
genes.x <- genes.pca$x[,genes.pca$sdev^2 >= 1]

colnames(taxa.x) <- gsub("PC", "T", colnames(taxa.x))
colnames(genes.x) <- gsub("PC", "F", colnames(genes.x))

y <- meta$genotype
full.data <- cbind(y = y, taxa.x, genes.x, alpha)
full.data <- droplevels(full.data[full.data$y != "other",])
```


## Notes


## References